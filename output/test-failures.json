{
  "timestamp": "2025-03-09T13:14:05.400Z",
  "testSuites": [
    {
      "name": "Unit Tests",
      "command": "npx jest tests/unit",
      "required": true,
      "status": "passed",
      "output": "--------------------------|---------|----------|---------|---------|----------------------------------------------------------------------------------------------------------------------\nFile                      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                    \n--------------------------|---------|----------|---------|---------|----------------------------------------------------------------------------------------------------------------------\nAll files                 |   36.78 |     24.9 |   29.33 |   37.89 |                                                                                                                      \n src                      |   49.41 |    30.85 |      50 |   51.53 |                                                                                                                      \n  index.js                |     100 |      100 |     100 |     100 |                                                                                                                      \n  ultralink.js            |   47.87 |    30.85 |      50 |      50 | 138-167,233-242,289,304-315,336-439,456,460,464,470-472,484-488,500-503,518-521,532-563                              \n src/core                 |   26.47 |     9.67 |   27.27 |   26.86 |                                                                                                                      \n  parser.js               |    8.33 |        0 |       0 |    8.33 | 16-114                                                                                                               \n  types.js                |   46.87 |    18.75 |      40 |   48.38 | 19,64-106                                                                                                            \n src/lib                  |   38.34 |     45.2 |   33.33 |   38.27 |                                                                                                                      \n  entity-manager.js       |   65.38 |    68.62 |      50 |   65.38 | 18,74-75,81,86,90,149-216                                                                                            \n  index.js                |     100 |      100 |     100 |     100 |                                                                                                                      \n  relationship-manager.js |   43.03 |    39.13 |   33.33 |   43.03 | 70-181,197-204                                                                                                       \n  utils.js                |     100 |    98.38 |     100 |     100 | 125                                                                                                                  \n  visualizers.js          |    0.56 |        0 |       0 |    0.59 | 30-671                                                                                                               \n src/lib/exporters        |   35.68 |     15.5 |   22.04 |   37.32 |                                                                                                                      \n  bayesian-network.js     |   26.79 |     6.66 |   34.14 |   31.45 | 45,49-52,60-136,310-312,367-370,380-399,418-481                                                                      \n  csv.js                  |   84.37 |       40 |   66.66 |   83.87 | 50-51,58,67-68                                                                                                       \n  full-blob.js            |   64.86 |       60 |     100 |   64.86 | 20-21,28-29,36-37,44-45,53-54,61,86-87                                                                               \n  graphml.js              |     100 |    83.33 |     100 |     100 | 13-26,63                                                                                                             \n  html-website.js         |    3.06 |        0 |       0 |    3.22 | 43-1055                                                                                                              \n  index.js                |     100 |      100 |     100 |     100 |                                                                                                                      \n  json.js                 |     100 |    78.57 |     100 |     100 | 16,25,44                                                                                                             \n  kif.js                  |   62.33 |    27.41 |   33.33 |   63.15 | 79,101-106,125-167                                                                                                   \n  obsidian.js             |    1.58 |        0 |       0 |    1.58 | 14-126                                                                                                               \n  visualization.js        |   28.65 |    14.64 |   16.21 |   28.99 | 73-83,95-121,140-157,180-181,217-219,232-234,250-263,275-276,285-290,298-342,370-406,414,426-429,449,455-457,481-795 \n src/lib/exporters/utils  |    2.63 |        0 |       0 |    2.77 |                                                                                                                      \n  relationship-html.js    |    2.63 |        0 |       0 |    2.77 | 14-78                                                                                                                \n--------------------------|---------|----------|---------|---------|----------------------------------------------------------------------------------------------------------------------\n",
      "error": null,
      "exitCode": 0
    },
    {
      "name": "Integration Tests",
      "command": "npx jest tests/integration",
      "required": true,
      "status": "failed",
      "output": "----------------------------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------\nFile                                          | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                    \n----------------------------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------\nAll files                                     |   59.61 |    27.18 |   45.39 |   60.79 |                                                                                                                                                      \n src                                          |   61.17 |     35.1 |   69.04 |    59.5 |                                                                                                                                                      \n  index.js                                    |     100 |      100 |     100 |     100 |                                                                                                                                                      \n  ultralink.js                                |      60 |     35.1 |   69.04 |   58.22 | 85-94,138-167,197,304-315,336-389,460,464,470-472,484-488,500-503,518-521,532-563,581-604                                                            \n src/core                                     |   86.76 |    48.38 |   72.72 |   88.05 |                                                                                                                                                      \n  parser.js                                   |   94.44 |       60 |     100 |   94.44 | 113-114                                                                                                                                              \n  types.js                                    |   78.12 |     37.5 |      60 |   80.64 | 19-23,50-54,98,106                                                                                                                                   \n src/lib                                      |   16.58 |    20.89 |   10.41 |   17.25 |                                                                                                                                                      \n  entity-manager.js                           |   38.46 |    37.25 |      30 |   38.46 | 18,51-93,127,149-216                                                                                                                                 \n  index.js                                    |     100 |      100 |     100 |     100 |                                                                                                                                                      \n  relationship-manager.js                     |   45.56 |    45.65 |   33.33 |   45.56 | 20,23,70-181                                                                                                                                         \n  utils.js                                    |    1.36 |        0 |       0 |    1.49 | 15-193                                                                                                                                               \n  visualizers.js                              |    0.56 |        0 |       0 |    0.59 | 30-671                                                                                                                                               \n src/lib/exporters                            |   61.08 |    34.22 |   54.33 |   63.45 |                                                                                                                                                      \n  bayesian-network.js                         |   39.86 |    10.37 |   56.09 |   45.96 | 45,52,60-136,310-312,367-370,380-399,418-419,457-458,465-466,475                                                                                     \n  csv.js                                      |     100 |    73.33 |     100 |     100 | 13-21,49-50                                                                                                                                          \n  full-blob.js                                |   64.86 |       50 |     100 |   64.86 | 20-21,28-29,36-37,44-45,53-54,61,86-87                                                                                                               \n  graphml.js                                  |     100 |    77.77 |     100 |     100 | 13-26,57-63                                                                                                                                          \n  html-website.js                             |   82.65 |    67.88 |   76.47 |   83.87 | 55,962-973,1009-1013,1031-1042                                                                                                                       \n  index.js                                    |     100 |      100 |     100 |     100 |                                                                                                                                                      \n  json.js                                     |     100 |    71.42 |     100 |     100 | 16,25,44,61                                                                                                                                          \n  kif.js                                      |   64.93 |    32.25 |   33.33 |   65.78 | 79,103-106,125-167                                                                                                                                   \n  obsidian.js                                 |   85.71 |    36.58 |      75 |   85.71 | 115-126                                                                                                                                              \n  visualization.js                            |   37.42 |    18.47 |   21.62 |   37.86 | 73-83,95-121,140,148-157,180-181,217-219,232-234,250-263,275-276,285-290,298-342,370-406,414,426-429,449,455-457,601-602,632,637-638,643-650,699-795 \n src/lib/exporters/utils                      |    2.63 |        0 |       0 |    2.77 |                                                                                                                                                      \n  relationship-html.js                        |    2.63 |        0 |       0 |    2.77 | 14-78                                                                                                                                                \n tests                                        |    7.04 |     1.78 |    3.84 |     7.4 |                                                                                                                                                      \n  test-config.js                              |     100 |      100 |     100 |     100 |                                                                                                                                                      \n  test-utils.js                               |    5.71 |     1.78 |    3.84 |    6.01 | 23-326,340                                                                                                                                           \n tests/fixtures                               |   65.38 |        0 |      50 |   65.38 |                                                                                                                                                      \n  research-team.js                            |   65.38 |        0 |      50 |   65.38 | 185-245                                                                                                                                              \n tests/fixtures/Systems/ActiveInferenceLab    |   79.31 |        0 |      50 |   79.31 |                                                                                                                                                      \n  active-inference-lab.js                     |   79.31 |        0 |      50 |   79.31 | 445-509                                                                                                                                              \n tests/fixtures/Systems/Car                   |     100 |      100 |     100 |     100 |                                                                                                                                                      \n  car.js                                      |     100 |      100 |     100 |     100 |                                                                                                                                                      \n tests/fixtures/Systems/DesertEcosystem       |   67.36 |        0 |      50 |   67.36 |                                                                                                                                                      \n  desert-ecosystem.js                         |   67.36 |        0 |      50 |   67.36 | 832-912                                                                                                                                              \n tests/fixtures/Systems/HumanAnatomy          |     100 |      100 |     100 |     100 |                                                                                                                                                      \n  human-anatomy.js                            |     100 |      100 |     100 |     100 |                                                                                                                                                      \n tests/fixtures/Systems/NeurofeedbackResearch |   96.72 |      100 |      50 |   96.72 |                                                                                                                                                      \n  neurofeedback-research.js                   |   96.72 |      100 |      50 |   96.72 | 492-496                                                                                                                                              \n tests/fixtures/Systems/ResearchTeam          |   88.51 |        0 |      50 |   88.51 |                                                                                                                                                      \n  research-team.js                            |   88.51 |        0 |      50 |   88.51 | 549-581                                                                                                                                              \n tests/fixtures/Systems/USAHistory            |   97.88 |        0 |      50 |   97.88 |                                                                                                                                                      \n  usa-history.js                              |   97.88 |        0 |      50 |   97.88 | 702-707                                                                                                                                              \n----------------------------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "error": "Command failed: npx jest tests/integration\nPASS tests/integration/research-team.test.js\n  Research Team Integration Tests\n    ✓ should correctly identify all researchers (29 ms)\n    ✓ should find entities by attribute value (5 ms)\n    ✓ should identify all project leads (6 ms)\n    ✓ should find all mentorship relationships (3 ms)\n    ✓ should identify equipment usage (5 ms)\n    ✓ should find all publications by author (4 ms)\n    ✓ should identify knowledge area expertise (5 ms)\n    ✓ should find project focus areas (3 ms)\n    ✓ should create valid subset of people data (5 ms)\n    ✓ should create valid subset of project data (4 ms)\n    ✓ should create valid subset of publication data (3 ms)\n    ✓ should handle invalid subset type (96 ms)\n\nPASS tests/integration/parser-store.test.js\n  UltraLinkParser and EntityStore Integration\n    Basic Parsing and Entity Creation\n      ✓ should parse Obsidian-style links and create corresponding entities (26 ms)\n      ✓ should handle documents with duplicate links (5 ms)\n    Custom Parser Integration\n      ✓ should use custom parsers to extract links in different formats (6 ms)\n    Multi-Document Integration\n      ✓ should correctly maintain entity relationships across multiple documents (4 ms)\n    Error Handling\n      ✓ should gracefully handle malformed input (3 ms)\n\nPASS tests/integration/html-website-visualization.test.js\n  HTML Website Visualization Tests\n    ✓ HTML website should include graph.js with proper graph data (33 ms)\n    ✓ graph.js should contain D3.js visualization initialization code (5 ms)\n    ✓ HTML website should correctly initialize the visualization on load (5 ms)\n\nPASS tests/integration/html-website-features.test.js\n  HTML Website Features\n    ✓ should include zoom and pan controls (30 ms)\n    ✓ should include clear filters button (7 ms)\n    ✓ should use responsive SVG with viewBox (12 ms)\n    ✓ should use title as fallback for name (5 ms)\n    ✓ should have improved entity detail pages with sections (8 ms)\n    ✓ should generate different themes correctly (5 ms)\n    ✓ should support interactive relationship navigation (3 ms)\n    ✓ should properly handle entities without name or title (5 ms)\n    ✓ should include relationship attributes in details view (5 ms)\n\nFAIL tests/integration/bayesian-network.test.js\n  Bayesian Network Generation\n    Car System\n      ✓ should generate valid BIF XML structure (31 ms)\n      ✕ should include system name and description (10 ms)\n      ✓ should define variables with proper structure (5 ms)\n      ✓ should include probability distributions (7 ms)\n      ✕ should have valid probability tables (6 ms)\n      ✕ should include system-specific variables (7 ms)\n      ✓ should maintain proper relationships between variables (5 ms)\n      ✓ should include entity variables (5 ms)\n      ✕ should have valid JSON format (13 ms)\n    ResearchTeam System\n      ✓ should generate valid BIF XML structure (10 ms)\n      ✕ should include system name and description (3 ms)\n      ✓ should define variables with proper structure (3 ms)\n      ✓ should include probability distributions (3 ms)\n      ✕ should have valid probability tables (11 ms)\n      ✕ should include system-specific variables (3 ms)\n      ✓ should maintain proper relationships between variables (9 ms)\n      ✓ should include entity variables (3 ms)\n      ✕ should have valid JSON format (8 ms)\n    DesertEcosystem System\n      ✓ should generate valid BIF XML structure (5 ms)\n      ✕ should include system name and description (3 ms)\n      ✓ should define variables with proper structure (2 ms)\n      ✓ should include probability distributions (7 ms)\n      ✕ should have valid probability tables (5 ms)\n      ✕ should include system-specific variables (5 ms)\n      ✓ should maintain proper relationships between variables (7 ms)\n      ✓ should include entity variables (3 ms)\n      ✕ should have valid JSON format (7 ms)\n    ActiveInferenceLab System\n      ✓ should generate valid BIF XML structure (2 ms)\n      ✕ should include system name and description (3 ms)\n      ✓ should define variables with proper structure (9 ms)\n      ✓ should include probability distributions (2 ms)\n      ✕ should have valid probability tables (3 ms)\n      ✕ should include system-specific variables (2 ms)\n      ✓ should maintain proper relationships between variables (2 ms)\n      ✓ should include entity variables (1 ms)\n      ✕ should have valid JSON format (3 ms)\n    USAHistory System\n      ✓ should generate valid BIF XML structure (5 ms)\n      ✕ should include system name and description (1 ms)\n      ✓ should define variables with proper structure (2 ms)\n      ✓ should include probability distributions (3 ms)\n      ✕ should have valid probability tables (7 ms)\n      ✕ should include system-specific variables (3 ms)\n      ✓ should maintain proper relationships between variables (3 ms)\n      ✓ should include entity variables (4 ms)\n      ✕ should have valid JSON format (5 ms)\n    NeurofeedbackResearch System\n      ✓ should generate valid BIF XML structure (3 ms)\n      ✕ should include system name and description (1 ms)\n      ✓ should define variables with proper structure (2 ms)\n      ✓ should include probability distributions (3 ms)\n      ✕ should have valid probability tables (3 ms)\n      ✕ should include system-specific variables (3 ms)\n      ✓ should maintain proper relationships between variables (2 ms)\n      ✓ should include entity variables (4 ms)\n      ✕ should have valid JSON format (3 ms)\n    HumanAnatomy System\n      ✓ should generate valid BIF XML structure (4 ms)\n      ✕ should include system name and description (2 ms)\n      ✓ should define variables with proper structure (2 ms)\n      ✓ should include probability distributions (2 ms)\n      ✕ should have valid probability tables (9 ms)\n      ✕ should include system-specific variables (2 ms)\n      ✓ should maintain proper relationships between variables (2 ms)\n      ✓ should include entity variables (2 ms)\n      ✕ should have valid JSON format (3 ms)\n\n  ● Bayesian Network Generation › Car System › should include system name and description\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>Car<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.92000 0.05000 0.03000</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      68 |\n      69 |       test('should include system name and description', () => {\n    > 70 |         expect(bifOutput).toMatch(new RegExp(`<NAME>${systemName}</NAME>`));\n         |                           ^\n      71 |         expect(bifOutput).toMatch(/<COMMENT>.*<\\/COMMENT>/);\n      72 |       });\n      73 |\n\n      at Object.toMatch (tests/integration/bayesian-network.test.js:70:27)\n\n  ● Bayesian Network Generation › Car System › should have valid probability tables\n\n    expect(received).toBeCloseTo(expected, precision)\n\n    Expected: 1\n    Received: 0.79\n\n    Expected precision:    5\n    Expected difference: < 0.000005\n    Received difference:   0.20999999999999996\n\n      114 |               .slice(i, i + rowSize)\n      115 |               .reduce((sum, prob) => sum + prob, 0);\n    > 116 |             expect(rowSum).toBeCloseTo(1, 5);\n          |                            ^\n      117 |           }\n      118 |         });\n      119 |       });\n\n      at toBeCloseTo (tests/integration/bayesian-network.test.js:116:28)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:96:22)\n\n  ● Bayesian Network Generation › Car System › should include system-specific variables\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>engine_system<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.54545 0.34343 0.11111</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      122 |         const expectedVariables = systemSpecificTests[systemName];\n      123 |         expectedVariables.forEach(variable => {\n    > 124 |           expect(bifOutput).toMatch(new RegExp(`<NAME>${variable}</NAME>`));\n          |                             ^\n      125 |         });\n      126 |       });\n      127 |\n\n      at toMatch (tests/integration/bayesian-network.test.js:124:29)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:123:27)\n\n  ● Bayesian Network Generation › Car System › should have valid JSON format\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"type\"\n\n    Expected value: \"Car\"\n    Received value: \"Generic\"\n\n      150 |         expect(jsonOutput).toHaveProperty('nodes');\n      151 |         expect(jsonOutput).toHaveProperty('edges');\n    > 152 |         expect(jsonOutput.metadata).toHaveProperty('type', systemName);\n          |                                     ^\n      153 |         expect(jsonOutput.metadata).toHaveProperty('timestamp');\n      154 |         expect(jsonOutput.nodes.length).toBeGreaterThan(0);\n      155 |       });\n\n      at Object.toHaveProperty (tests/integration/bayesian-network.test.js:152:37)\n\n  ● Bayesian Network Generation › ResearchTeam System › should include system name and description\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>ResearchTeam<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.74000 0.25000 0.01000</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      68 |\n      69 |       test('should include system name and description', () => {\n    > 70 |         expect(bifOutput).toMatch(new RegExp(`<NAME>${systemName}</NAME>`));\n         |                           ^\n      71 |         expect(bifOutput).toMatch(/<COMMENT>.*<\\/COMMENT>/);\n      72 |       });\n      73 |\n\n      at Object.toMatch (tests/integration/bayesian-network.test.js:70:27)\n\n  ● Bayesian Network Generation › ResearchTeam System › should have valid probability tables\n\n    expect(received).toBeCloseTo(expected, precision)\n\n    Expected: 1\n    Received: 0.59\n\n    Expected precision:    5\n    Expected difference: < 0.000005\n    Received difference:   0.41000000000000003\n\n      114 |               .slice(i, i + rowSize)\n      115 |               .reduce((sum, prob) => sum + prob, 0);\n    > 116 |             expect(rowSum).toBeCloseTo(1, 5);\n          |                            ^\n      117 |           }\n      118 |         });\n      119 |       });\n\n      at toBeCloseTo (tests/integration/bayesian-network.test.js:116:28)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:96:22)\n\n  ● Bayesian Network Generation › ResearchTeam System › should include system-specific variables\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>researcher_productivity<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.68000 0.24000 0.08000</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      122 |         const expectedVariables = systemSpecificTests[systemName];\n      123 |         expectedVariables.forEach(variable => {\n    > 124 |           expect(bifOutput).toMatch(new RegExp(`<NAME>${variable}</NAME>`));\n          |                             ^\n      125 |         });\n      126 |       });\n      127 |\n\n      at toMatch (tests/integration/bayesian-network.test.js:124:29)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:123:27)\n\n  ● Bayesian Network Generation › ResearchTeam System › should have valid JSON format\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"type\"\n\n    Expected value: \"ResearchTeam\"\n    Received value: \"Generic\"\n\n      150 |         expect(jsonOutput).toHaveProperty('nodes');\n      151 |         expect(jsonOutput).toHaveProperty('edges');\n    > 152 |         expect(jsonOutput.metadata).toHaveProperty('type', systemName);\n          |                                     ^\n      153 |         expect(jsonOutput.metadata).toHaveProperty('timestamp');\n      154 |         expect(jsonOutput.nodes.length).toBeGreaterThan(0);\n      155 |       });\n\n      at Object.toHaveProperty (tests/integration/bayesian-network.test.js:152:37)\n\n  ● Bayesian Network Generation › DesertEcosystem System › should include system name and description\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>DesertEcosystem<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.83168 0.12871 0.03960</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      68 |\n      69 |       test('should include system name and description', () => {\n    > 70 |         expect(bifOutput).toMatch(new RegExp(`<NAME>${systemName}</NAME>`));\n         |                           ^\n      71 |         expect(bifOutput).toMatch(/<COMMENT>.*<\\/COMMENT>/);\n      72 |       });\n      73 |\n\n      at Object.toMatch (tests/integration/bayesian-network.test.js:70:27)\n\n  ● Bayesian Network Generation › DesertEcosystem System › should have valid probability tables\n\n    expect(received).toBeCloseTo(expected, precision)\n\n    Expected: 1\n    Received: 0.67\n\n    Expected precision:    5\n    Expected difference: < 0.000005\n    Received difference:   0.32999999999999996\n\n      114 |               .slice(i, i + rowSize)\n      115 |               .reduce((sum, prob) => sum + prob, 0);\n    > 116 |             expect(rowSum).toBeCloseTo(1, 5);\n          |                            ^\n      117 |           }\n      118 |         });\n      119 |       });\n\n      at toBeCloseTo (tests/integration/bayesian-network.test.js:116:28)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:96:22)\n\n  ● Bayesian Network Generation › DesertEcosystem System › should include system-specific variables\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>temperature<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.51000 0.38000 0.11000</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      122 |         const expectedVariables = systemSpecificTests[systemName];\n      123 |         expectedVariables.forEach(variable => {\n    > 124 |           expect(bifOutput).toMatch(new RegExp(`<NAME>${variable}</NAME>`));\n          |                             ^\n      125 |         });\n      126 |       });\n      127 |\n\n      at toMatch (tests/integration/bayesian-network.test.js:124:29)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:123:27)\n\n  ● Bayesian Network Generation › DesertEcosystem System › should have valid JSON format\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"type\"\n\n    Expected value: \"DesertEcosystem\"\n    Received value: \"Generic\"\n\n      150 |         expect(jsonOutput).toHaveProperty('nodes');\n      151 |         expect(jsonOutput).toHaveProperty('edges');\n    > 152 |         expect(jsonOutput.metadata).toHaveProperty('type', systemName);\n          |                                     ^\n      153 |         expect(jsonOutput.metadata).toHaveProperty('timestamp');\n      154 |         expect(jsonOutput.nodes.length).toBeGreaterThan(0);\n      155 |       });\n\n      at Object.toHaveProperty (tests/integration/bayesian-network.test.js:152:37)\n\n  ● Bayesian Network Generation › ActiveInferenceLab System › should include system name and description\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>ActiveInferenceLab<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.65657 0.20202 0.14141</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      68 |\n      69 |       test('should include system name and description', () => {\n    > 70 |         expect(bifOutput).toMatch(new RegExp(`<NAME>${systemName}</NAME>`));\n         |                           ^\n      71 |         expect(bifOutput).toMatch(/<COMMENT>.*<\\/COMMENT>/);\n      72 |       });\n      73 |\n\n      at Object.toMatch (tests/integration/bayesian-network.test.js:70:27)\n\n  ● Bayesian Network Generation › ActiveInferenceLab System › should have valid probability tables\n\n    expect(received).toBeCloseTo(expected, precision)\n\n    Expected: 1\n    Received: 0.53\n\n    Expected precision:    5\n    Expected difference: < 0.000005\n    Received difference:   0.47\n\n      114 |               .slice(i, i + rowSize)\n      115 |               .reduce((sum, prob) => sum + prob, 0);\n    > 116 |             expect(rowSum).toBeCloseTo(1, 5);\n          |                            ^\n      117 |           }\n      118 |         });\n      119 |       });\n\n      at toBeCloseTo (tests/integration/bayesian-network.test.js:116:28)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:96:22)\n\n  ● Bayesian Network Generation › ActiveInferenceLab System › should include system-specific variables\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>experiment_success<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.93000 0.05000 0.02000</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      122 |         const expectedVariables = systemSpecificTests[systemName];\n      123 |         expectedVariables.forEach(variable => {\n    > 124 |           expect(bifOutput).toMatch(new RegExp(`<NAME>${variable}</NAME>`));\n          |                             ^\n      125 |         });\n      126 |       });\n      127 |\n\n      at toMatch (tests/integration/bayesian-network.test.js:124:29)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:123:27)\n\n  ● Bayesian Network Generation › ActiveInferenceLab System › should have valid JSON format\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"type\"\n\n    Expected value: \"ActiveInferenceLab\"\n    Received value: \"Generic\"\n\n      150 |         expect(jsonOutput).toHaveProperty('nodes');\n      151 |         expect(jsonOutput).toHaveProperty('edges');\n    > 152 |         expect(jsonOutput.metadata).toHaveProperty('type', systemName);\n          |                                     ^\n      153 |         expect(jsonOutput.metadata).toHaveProperty('timestamp');\n      154 |         expect(jsonOutput.nodes.length).toBeGreaterThan(0);\n      155 |       });\n\n      at Object.toHaveProperty (tests/integration/bayesian-network.test.js:152:37)\n\n  ● Bayesian Network Generation › USAHistory System › should include system name and description\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>USAHistory<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.56000 0.40000 0.04000</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      68 |\n      69 |       test('should include system name and description', () => {\n    > 70 |         expect(bifOutput).toMatch(new RegExp(`<NAME>${systemName}</NAME>`));\n         |                           ^\n      71 |         expect(bifOutput).toMatch(/<COMMENT>.*<\\/COMMENT>/);\n      72 |       });\n      73 |\n\n      at Object.toMatch (tests/integration/bayesian-network.test.js:70:27)\n\n  ● Bayesian Network Generation › USAHistory System › should have valid probability tables\n\n    expect(received).toBeCloseTo(expected, precision)\n\n    Expected: 1\n    Received: 0.61616\n\n    Expected precision:    5\n    Expected difference: < 0.000005\n    Received difference:   0.38383999999999996\n\n      114 |               .slice(i, i + rowSize)\n      115 |               .reduce((sum, prob) => sum + prob, 0);\n    > 116 |             expect(rowSum).toBeCloseTo(1, 5);\n          |                            ^\n      117 |           }\n      118 |         });\n      119 |       });\n\n      at toBeCloseTo (tests/integration/bayesian-network.test.js:116:28)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:96:22)\n\n  ● Bayesian Network Generation › USAHistory System › should include system-specific variables\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>political_climate<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.88000 0.10000 0.02000</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      122 |         const expectedVariables = systemSpecificTests[systemName];\n      123 |         expectedVariables.forEach(variable => {\n    > 124 |           expect(bifOutput).toMatch(new RegExp(`<NAME>${variable}</NAME>`));\n          |                             ^\n      125 |         });\n      126 |       });\n      127 |\n\n      at toMatch (tests/integration/bayesian-network.test.js:124:29)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:123:27)\n\n  ● Bayesian Network Generation › USAHistory System › should have valid JSON format\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"type\"\n\n    Expected value: \"USAHistory\"\n    Received value: \"Generic\"\n\n      150 |         expect(jsonOutput).toHaveProperty('nodes');\n      151 |         expect(jsonOutput).toHaveProperty('edges');\n    > 152 |         expect(jsonOutput.metadata).toHaveProperty('type', systemName);\n          |                                     ^\n      153 |         expect(jsonOutput.metadata).toHaveProperty('timestamp');\n      154 |         expect(jsonOutput.nodes.length).toBeGreaterThan(0);\n      155 |       });\n\n      at Object.toHaveProperty (tests/integration/bayesian-network.test.js:152:37)\n\n  ● Bayesian Network Generation › NeurofeedbackResearch System › should include system name and description\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>NeurofeedbackResearch<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.57000 0.27000 0.16000</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      68 |\n      69 |       test('should include system name and description', () => {\n    > 70 |         expect(bifOutput).toMatch(new RegExp(`<NAME>${systemName}</NAME>`));\n         |                           ^\n      71 |         expect(bifOutput).toMatch(/<COMMENT>.*<\\/COMMENT>/);\n      72 |       });\n      73 |\n\n      at Object.toMatch (tests/integration/bayesian-network.test.js:70:27)\n\n  ● Bayesian Network Generation › NeurofeedbackResearch System › should have valid probability tables\n\n    expect(received).toBeCloseTo(expected, precision)\n\n    Expected: 1\n    Received: 0.63\n\n    Expected precision:    5\n    Expected difference: < 0.000005\n    Received difference:   0.37\n\n      114 |               .slice(i, i + rowSize)\n      115 |               .reduce((sum, prob) => sum + prob, 0);\n    > 116 |             expect(rowSum).toBeCloseTo(1, 5);\n          |                            ^\n      117 |           }\n      118 |         });\n      119 |       });\n\n      at toBeCloseTo (tests/integration/bayesian-network.test.js:116:28)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:96:22)\n\n  ● Bayesian Network Generation › NeurofeedbackResearch System › should include system-specific variables\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>brain_activity<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.80000 0.15000 0.05000</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      122 |         const expectedVariables = systemSpecificTests[systemName];\n      123 |         expectedVariables.forEach(variable => {\n    > 124 |           expect(bifOutput).toMatch(new RegExp(`<NAME>${variable}</NAME>`));\n          |                             ^\n      125 |         });\n      126 |       });\n      127 |\n\n      at toMatch (tests/integration/bayesian-network.test.js:124:29)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:123:27)\n\n  ● Bayesian Network Generation › NeurofeedbackResearch System › should have valid JSON format\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"type\"\n\n    Expected value: \"NeurofeedbackResearch\"\n    Received value: \"Generic\"\n\n      150 |         expect(jsonOutput).toHaveProperty('nodes');\n      151 |         expect(jsonOutput).toHaveProperty('edges');\n    > 152 |         expect(jsonOutput.metadata).toHaveProperty('type', systemName);\n          |                                     ^\n      153 |         expect(jsonOutput.metadata).toHaveProperty('timestamp');\n      154 |         expect(jsonOutput.nodes.length).toBeGreaterThan(0);\n      155 |       });\n\n      at Object.toHaveProperty (tests/integration/bayesian-network.test.js:152:37)\n\n  ● Bayesian Network Generation › HumanAnatomy System › should include system name and description\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>HumanAnatomy<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.99000 0.01000 0.00000</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      68 |\n      69 |       test('should include system name and description', () => {\n    > 70 |         expect(bifOutput).toMatch(new RegExp(`<NAME>${systemName}</NAME>`));\n         |                           ^\n      71 |         expect(bifOutput).toMatch(/<COMMENT>.*<\\/COMMENT>/);\n      72 |       });\n      73 |\n\n      at Object.toMatch (tests/integration/bayesian-network.test.js:70:27)\n\n  ● Bayesian Network Generation › HumanAnatomy System › should have valid probability tables\n\n    expect(received).toBeCloseTo(expected, precision)\n\n    Expected: 1\n    Received: 0.76\n\n    Expected precision:    5\n    Expected difference: < 0.000005\n    Received difference:   0.24\n\n      114 |               .slice(i, i + rowSize)\n      115 |               .reduce((sum, prob) => sum + prob, 0);\n    > 116 |             expect(rowSum).toBeCloseTo(1, 5);\n          |                            ^\n      117 |           }\n      118 |         });\n      119 |       });\n\n      at toBeCloseTo (tests/integration/bayesian-network.test.js:116:28)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:96:22)\n\n  ● Bayesian Network Generation › HumanAnatomy System › should include system-specific variables\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /<NAME>organ_function<\\/NAME>/\n    Received string:  \"<?xml version=\\\"1.0\\\"?>\n    <BIF VERSION=\\\"0.3\\\">\n    <NETWORK>\n    <NAME>Generic</NAME>\n    <COMMENT>Bayesian Network representing Generic system components and their dependencies</COMMENT>·\n    <!-- Variables -->\n    <VARIABLE TYPE=\\\"discrete\\\">\n        <NAME>system_state</NAME>\n        <OUTCOME>good</OUTCOME>\n        <OUTCOME>fair</OUTCOME>\n        <OUTCOME>poor</OUTCOME>\n        <COMMENT>Overall system state</COMMENT>\n    </VARIABLE>·\n    <!-- Probability Distributions -->\n    <DEFINITION>\n        <FOR>system_state</FOR>\n        <TABLE>0.72277 0.16832 0.10891</TABLE>\n    </DEFINITION>\n    </NETWORK>\n    </BIF>\"\n\n      122 |         const expectedVariables = systemSpecificTests[systemName];\n      123 |         expectedVariables.forEach(variable => {\n    > 124 |           expect(bifOutput).toMatch(new RegExp(`<NAME>${variable}</NAME>`));\n          |                             ^\n      125 |         });\n      126 |       });\n      127 |\n\n      at toMatch (tests/integration/bayesian-network.test.js:124:29)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/integration/bayesian-network.test.js:123:27)\n\n  ● Bayesian Network Generation › HumanAnatomy System › should have valid JSON format\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"type\"\n\n    Expected value: \"HumanAnatomy\"\n    Received value: \"Generic\"\n\n      150 |         expect(jsonOutput).toHaveProperty('nodes');\n      151 |         expect(jsonOutput).toHaveProperty('edges');\n    > 152 |         expect(jsonOutput.metadata).toHaveProperty('type', systemName);\n          |                                     ^\n      153 |         expect(jsonOutput.metadata).toHaveProperty('timestamp');\n      154 |         expect(jsonOutput.nodes.length).toBeGreaterThan(0);\n      155 |       });\n\n      at Object.toHaveProperty (tests/integration/bayesian-network.test.js:152:37)\n\nFAIL tests/integration/research-team-export.test.js (5.182 s)\n  Research Team Export Tests\n    ✓ HTML Website Export (54 ms)\n    ✓ GraphML Export (13 ms)\n    ✓ Obsidian Export (21 ms)\n    ✓ CSV Export (7 ms)\n    ✓ Full Blob Export (1441 ms)\n    ✕ Bayesian Network Export (6 ms)\n    ✕ Visualization Export (18 ms)\n\n  ● Research Team Export Tests › Bayesian Network Export\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"type\"\n\n    Expected value: \"ResearchTeam\"\n    Received value: \"Generic\"\n\n      396 |     expect(network).toHaveProperty('nodes');\n      397 |     expect(network).toHaveProperty('edges');\n    > 398 |     expect(network.metadata).toHaveProperty('type', 'ResearchTeam');\n          |                              ^\n      399 |     expect(network.nodes.length).toBeGreaterThan(0);\n      400 |\n      401 |     // Check for specific nodes\n\n      at Object.toHaveProperty (tests/integration/research-team-export.test.js:398:30)\n\n  ● Research Team Export Tests › Visualization Export\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"<circle\"\n    Received string:    \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"800\\\" height=\\\"600\\\" viewBox=\\\"0,0,800,600\\\"><style>\n            .node { cursor: pointer; }\n            .link { stroke: #999; stroke-opacity: 0.6; }\n            .label { font-family: sans-serif; font-size: 10px; }\n          </style><rect width=\\\"800\\\" height=\\\"600\\\" fill=\\\"#f8f9fa\\\"></rect><g class=\\\"links\\\"></g><g class=\\\"nodes\\\"></g><g class=\\\"labels\\\"></g></svg>\"\n\n      445 |     // Check for specific elements\n      446 |     expect(svg).toContain('<g');\n    > 447 |     expect(svg).toContain('<circle');\n          |                 ^\n      448 |     \n      449 |     // Check for style definitions\n      450 |     expect(svg).toContain('<style>');\n\n      at Object.toContain (tests/integration/research-team-export.test.js:447:17)\n\nFAIL tests/integration/export-formats.test.js (5.63 s)\n  Export Formats Integration\n    ✓ HTML Website export format (23 ms)\n    JSON Export\n      ✓ should export a complete and valid JSON representation (7 ms)\n      ✓ should export JSON with vectors if requested (6 ms)\n    GraphML Export\n      ✓ should export a valid GraphML representation (10 ms)\n      ✓ should export GraphML with attributes if requested (9 ms)\n    CSV Export\n      ✓ should export valid CSV files for entities and relationships (12 ms)\n    Obsidian Export\n      ✓ should export a complete Obsidian knowledge base (7 ms)\n      ✓ should include backlinks if requested (4 ms)\n    HTML Website Export\n      ✓ should export a complete HTML website (10 ms)\n    Full Blob Export\n      ✓ should export and import a full data blob (1312 ms)\n      ✓ should export a compressed full blob (19 ms)\n      ✕ should include valid Bayesian Network and Visualization data in full blob (39 ms)\n    KIF Format Export\n      ✓ should export to KIF format with basic content (2 ms)\n      ✓ should include meta-knowledge, functions, and rules when requested (3 ms)\n      ✓ should export complex entities with vectors and temporal data in KIF format (4 ms)\n  Bayesian Network Export\n    ✓ JSON format should contain nodes and edges (1 ms)\n    ✓ BIF format should be generated properly (2 ms)\n  Visualization Export\n    ✓ SVG format should contain nodes and links (17 ms)\n    ✓ D3 format should create a valid HTML file with D3 code (2 ms)\n    ✓ Cytoscape format should create a valid HTML file with Cytoscape code (2 ms)\n\n  ● Export Formats Integration › Full Blob Export › should include valid Bayesian Network and Visualization data in full blob\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      433 |         : bayesianNetwork.nodes['saguaro'];\n      434 |         \n    > 435 |       expect(saguaroNode).toBeDefined();\n          |                           ^\n      436 |       \n      437 |       // Verify Visualization format\n      438 |       expect(blob.visualization.svg).toBeDefined();\n\n      at Object.toBeDefined (tests/integration/export-formats.test.js:435:27)\n\nA worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks. Active timers can also cause this, ensure that .unref() was called on them.\nTest Suites: 3 failed, 4 passed, 7 total\nTests:       31 failed, 88 passed, 119 total\nSnapshots:   0 total\nTime:        6.634 s\nRan all test suites matching /tests\\/integration/i.\n",
      "exitCode": 1
    },
    {
      "name": "System Export Tests",
      "command": "npx jest tests/system",
      "required": true,
      "status": "passed",
      "output": "  console.warn\n    PNG visualization output for ResearchTeam is not in expected format\n\n      298 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.${vizFormat}`));\n      299 |                       } else {\n    > 300 |                         console.warn(`${vizFormat.toUpperCase()} visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      301 |                         // Create a fallback visualization file\n      302 |                         let fallbackContent;\n      303 |                         if (vizFormat === 'svg') {\n\n      at warn (tests/system/rendering.test.js:300:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: png, Files found: [ 'researchteam.png' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    SVG visualization output for ResearchTeam is not in expected format\n\n      298 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.${vizFormat}`));\n      299 |                       } else {\n    > 300 |                         console.warn(`${vizFormat.toUpperCase()} visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      301 |                         // Create a fallback visualization file\n      302 |                         let fallbackContent;\n      303 |                         if (vizFormat === 'svg') {\n\n      at warn (tests/system/rendering.test.js:300:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: svg, Files found: [ 'researchteam.svg' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    D3 visualization output for ResearchTeam is not in expected format\n\n      274 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.d3`));\n      275 |                       } else {\n    > 276 |                         console.warn(`D3 visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      277 |                         // Create a fallback visualization file\n      278 |                         const fallbackContent = `/* Fallback D3 visualization for ${systemName} - Test Environment */`;\n      279 |                         fs.writeFileSync(path.join(vizDir, `${systemName.toLowerCase()}.d3`), fallbackContent);\n\n      at warn (tests/system/rendering.test.js:276:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: d3, Files found: [ 'researchteam-d3.html', 'researchteam.d3' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    Cytoscape visualization output for ResearchTeam is not in expected format\n\n      286 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}-cytoscape.html`));\n      287 |                       } else {\n    > 288 |                         console.warn(`Cytoscape visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      289 |                         // Create a fallback visualization file\n      290 |                         const fallbackContent = `/* Fallback Cytoscape visualization for ${systemName} - Test Environment */`;\n      291 |                         fs.writeFileSync(path.join(vizDir, `${systemName.toLowerCase()}-cytoscape.html`), fallbackContent);\n\n      at warn (tests/system/rendering.test.js:288:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: cytoscape, Files found: [ 'researchteam-cytoscape.html' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    PNG visualization output for DesertEcosystem is not in expected format\n\n      298 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.${vizFormat}`));\n      299 |                       } else {\n    > 300 |                         console.warn(`${vizFormat.toUpperCase()} visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      301 |                         // Create a fallback visualization file\n      302 |                         let fallbackContent;\n      303 |                         if (vizFormat === 'svg') {\n\n      at warn (tests/system/rendering.test.js:300:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: png, Files found: [ 'desertecosystem.png' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    SVG visualization output for DesertEcosystem is not in expected format\n\n      298 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.${vizFormat}`));\n      299 |                       } else {\n    > 300 |                         console.warn(`${vizFormat.toUpperCase()} visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      301 |                         // Create a fallback visualization file\n      302 |                         let fallbackContent;\n      303 |                         if (vizFormat === 'svg') {\n\n      at warn (tests/system/rendering.test.js:300:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: svg, Files found: [ 'desertecosystem.svg' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    D3 visualization output for DesertEcosystem is not in expected format\n\n      274 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.d3`));\n      275 |                       } else {\n    > 276 |                         console.warn(`D3 visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      277 |                         // Create a fallback visualization file\n      278 |                         const fallbackContent = `/* Fallback D3 visualization for ${systemName} - Test Environment */`;\n      279 |                         fs.writeFileSync(path.join(vizDir, `${systemName.toLowerCase()}.d3`), fallbackContent);\n\n      at warn (tests/system/rendering.test.js:276:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: d3, Files found: [ 'desertecosystem-d3.html', 'desertecosystem.d3' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    Cytoscape visualization output for DesertEcosystem is not in expected format\n\n      286 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}-cytoscape.html`));\n      287 |                       } else {\n    > 288 |                         console.warn(`Cytoscape visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      289 |                         // Create a fallback visualization file\n      290 |                         const fallbackContent = `/* Fallback Cytoscape visualization for ${systemName} - Test Environment */`;\n      291 |                         fs.writeFileSync(path.join(vizDir, `${systemName.toLowerCase()}-cytoscape.html`), fallbackContent);\n\n      at warn (tests/system/rendering.test.js:288:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: cytoscape, Files found: [ 'desertecosystem-cytoscape.html' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    PNG visualization output for ActiveInferenceLab is not in expected format\n\n      298 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.${vizFormat}`));\n      299 |                       } else {\n    > 300 |                         console.warn(`${vizFormat.toUpperCase()} visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      301 |                         // Create a fallback visualization file\n      302 |                         let fallbackContent;\n      303 |                         if (vizFormat === 'svg') {\n\n      at warn (tests/system/rendering.test.js:300:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: png, Files found: [ 'activeinferencelab.png' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    SVG visualization output for ActiveInferenceLab is not in expected format\n\n      298 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.${vizFormat}`));\n      299 |                       } else {\n    > 300 |                         console.warn(`${vizFormat.toUpperCase()} visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      301 |                         // Create a fallback visualization file\n      302 |                         let fallbackContent;\n      303 |                         if (vizFormat === 'svg') {\n\n      at warn (tests/system/rendering.test.js:300:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: svg, Files found: [ 'activeinferencelab.svg' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    D3 visualization output for ActiveInferenceLab is not in expected format\n\n      274 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.d3`));\n      275 |                       } else {\n    > 276 |                         console.warn(`D3 visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      277 |                         // Create a fallback visualization file\n      278 |                         const fallbackContent = `/* Fallback D3 visualization for ${systemName} - Test Environment */`;\n      279 |                         fs.writeFileSync(path.join(vizDir, `${systemName.toLowerCase()}.d3`), fallbackContent);\n\n      at warn (tests/system/rendering.test.js:276:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: d3, Files found: [ 'activeinferencelab-d3.html', 'activeinferencelab.d3' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    Cytoscape visualization output for ActiveInferenceLab is not in expected format\n\n      286 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}-cytoscape.html`));\n      287 |                       } else {\n    > 288 |                         console.warn(`Cytoscape visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      289 |                         // Create a fallback visualization file\n      290 |                         const fallbackContent = `/* Fallback Cytoscape visualization for ${systemName} - Test Environment */`;\n      291 |                         fs.writeFileSync(path.join(vizDir, `${systemName.toLowerCase()}-cytoscape.html`), fallbackContent);\n\n      at warn (tests/system/rendering.test.js:288:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: cytoscape, Files found: [ 'activeinferencelab-cytoscape.html' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    PNG visualization output for USAHistory is not in expected format\n\n      298 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.${vizFormat}`));\n      299 |                       } else {\n    > 300 |                         console.warn(`${vizFormat.toUpperCase()} visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      301 |                         // Create a fallback visualization file\n      302 |                         let fallbackContent;\n      303 |                         if (vizFormat === 'svg') {\n\n      at warn (tests/system/rendering.test.js:300:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: png, Files found: [ 'usahistory.png' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    SVG visualization output for USAHistory is not in expected format\n\n      298 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.${vizFormat}`));\n      299 |                       } else {\n    > 300 |                         console.warn(`${vizFormat.toUpperCase()} visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      301 |                         // Create a fallback visualization file\n      302 |                         let fallbackContent;\n      303 |                         if (vizFormat === 'svg') {\n\n      at warn (tests/system/rendering.test.js:300:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: svg, Files found: [ 'usahistory.svg' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    D3 visualization output for USAHistory is not in expected format\n\n      274 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}.d3`));\n      275 |                       } else {\n    > 276 |                         console.warn(`D3 visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      277 |                         // Create a fallback visualization file\n      278 |                         const fallbackContent = `/* Fallback D3 visualization for ${systemName} - Test Environment */`;\n      279 |                         fs.writeFileSync(path.join(vizDir, `${systemName.toLowerCase()}.d3`), fallbackContent);\n\n      at warn (tests/system/rendering.test.js:276:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: d3, Files found: [ 'usahistory-d3.html', 'usahistory.d3' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n  console.warn\n    Cytoscape visualization output for USAHistory is not in expected format\n\n      286 |                         outputFiles.push(path.join(vizDir, `${systemName.toLowerCase()}-cytoscape.html`));\n      287 |                       } else {\n    > 288 |                         console.warn(`Cytoscape visualization output for ${systemName} is not in expected format`);\n          |                                 ^\n      289 |                         // Create a fallback visualization file\n      290 |                         const fallbackContent = `/* Fallback Cytoscape visualization for ${systemName} - Test Environment */`;\n      291 |                         fs.writeFileSync(path.join(vizDir, `${systemName.toLowerCase()}-cytoscape.html`), fallbackContent);\n\n      at warn (tests/system/rendering.test.js:288:33)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/system/rendering.test.js:260:29)\n\n  console.log\n    Testing format: cytoscape, Files found: [ 'usahistory-cytoscape.html' ]\n\n      at log (tests/system/rendering.test.js:348:27)\n          at Array.forEach (<anonymous>)\n\n-------------------------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------\nFile                                       | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                                \n-------------------------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------\nAll files                                  |   42.61 |    18.82 |   24.52 |   43.81 |                                                                                                                                                                  \n src                                       |   23.52 |     7.44 |   30.95 |   24.53 |                                                                                                                                                                  \n  index.js                                 |     100 |      100 |     100 |     100 |                                                                                                                                                                  \n  ultralink.js                             |   21.21 |     7.44 |   30.95 |   22.15 | 74-103,138-167,197,274-604                                                                                                                                       \n src/core                                  |    5.88 |        0 |       0 |    5.97 |                                                                                                                                                                  \n  parser.js                                |    8.33 |        0 |       0 |    8.33 | 16-114                                                                                                                                                           \n  types.js                                 |    3.12 |        0 |       0 |    3.22 | 12-106                                                                                                                                                           \n src/lib                                   |    9.58 |     7.19 |    6.25 |    9.97 |                                                                                                                                                                  \n  entity-manager.js                        |    9.61 |     3.92 |      10 |    9.61 | 18,41-216                                                                                                                                                        \n  index.js                                 |     100 |      100 |     100 |     100 |                                                                                                                                                                  \n  relationship-manager.js                  |   30.37 |    20.65 |   33.33 |   30.37 | 20,23,70-181,197-204,210-215,224-229                                                                                                                             \n  utils.js                                 |    1.36 |        0 |       0 |    1.49 | 15-193                                                                                                                                                           \n  visualizers.js                           |    0.56 |        0 |       0 |    0.59 | 30-671                                                                                                                                                           \n src/lib/exporters                         |   49.92 |    31.01 |   35.43 |   52.25 |                                                                                                                                                                  \n  bayesian-network.js                      |     1.3 |        0 |       0 |    1.61 | 5-481                                                                                                                                                            \n  csv.js                                   |     100 |       80 |     100 |     100 | 13-21,49                                                                                                                                                         \n  full-blob.js                             |     2.7 |        0 |       0 |     2.7 | 14-91                                                                                                                                                            \n  graphml.js                               |     100 |    83.33 |     100 |     100 | 13-26,63                                                                                                                                                         \n  html-website.js                          |   82.65 |    64.22 |   76.47 |   83.87 | 55,962-973,1009-1013,1031-1042                                                                                                                                   \n  index.js                                 |     100 |      100 |     100 |     100 |                                                                                                                                                                  \n  json.js                                  |   86.66 |    57.14 |     100 |   86.66 | 31,63                                                                                                                                                            \n  kif.js                                   |   64.93 |    29.03 |   33.33 |   65.78 | 77,103-106,125-167                                                                                                                                               \n  obsidian.js                              |   85.71 |    53.65 |      75 |   85.71 | 115-126                                                                                                                                                          \n  visualization.js                         |    42.1 |    18.47 |   24.32 |    42.6 | 73-83,95-121,148-157,180-181,217-219,232-234,250-263,275-276,285-290,298-300,324-326,335-342,370-406,414,426-429,449,455-457,601-602,632,637-638,643-650,699-795 \n src/lib/exporters/utils                   |    2.63 |        0 |       0 |    2.77 |                                                                                                                                                                  \n  relationship-html.js                     |    2.63 |        0 |       0 |    2.77 | 14-78                                                                                                                                                            \n tests/fixtures/Systems/ActiveInferenceLab |   79.31 |        0 |      50 |   79.31 |                                                                                                                                                                  \n  active-inference-lab.js                  |   79.31 |        0 |      50 |   79.31 | 445-509                                                                                                                                                          \n tests/fixtures/Systems/DesertEcosystem    |   67.36 |        0 |      50 |   67.36 |                                                                                                                                                                  \n  desert-ecosystem.js                      |   67.36 |        0 |      50 |   67.36 | 832-912                                                                                                                                                          \n tests/fixtures/Systems/ResearchTeam       |   88.51 |        0 |      50 |   88.51 |                                                                                                                                                                  \n  research-team.js                         |   88.51 |        0 |      50 |   88.51 | 549-581                                                                                                                                                          \n tests/fixtures/Systems/USAHistory         |   97.88 |        0 |      50 |   97.88 |                                                                                                                                                                  \n  usa-history.js                           |   97.88 |        0 |      50 |   97.88 | 702-707                                                                                                                                                          \n tests/runners                             |    4.21 |        0 |       0 |    4.26 |                                                                                                                                                                  \n  output-validator.js                      |    4.21 |        0 |       0 |    4.26 | 24-401                                                                                                                                                           \n-------------------------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "error": null,
      "exitCode": 0
    },
    {
      "name": "End-to-End Tests",
      "command": "npx jest tests/e2e",
      "required": true,
      "status": "passed",
      "output": "--------------------------|---------|----------|---------|---------|--------------------------------------------------\nFile                      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                \n--------------------------|---------|----------|---------|---------|--------------------------------------------------\nAll files                 |   24.69 |    13.93 |   22.84 |   25.58 |                                                  \n src                      |      20 |     7.44 |   26.19 |   20.88 |                                                  \n  ultralink.js            |      20 |     7.44 |   26.19 |   20.88 | 74-103,138-167,197,251-604                       \n src/lib                  |    14.7 |    10.24 |      12 |   15.15 |                                                  \n  entity-manager.js       |    9.61 |     3.92 |      10 |    9.61 | 18,41-216                                        \n  relationship-manager.js |   30.37 |    20.65 |   33.33 |   30.37 | 20,23,70-181,197-204,210-215,224-229             \n  utils.js                |    1.36 |        0 |       0 |    1.49 | 15-193                                           \n src/lib/exporters        |   30.14 |    17.11 |    24.4 |   31.32 |                                                  \n  bayesian-network.js     |     1.3 |        0 |       0 |    1.61 | 5-481                                            \n  csv.js                  |   84.37 |    33.33 |   66.66 |   83.87 | 50-51,58,67-68                                   \n  full-blob.js            |     2.7 |        0 |       0 |     2.7 | 14-91                                            \n  graphml.js              |     100 |    77.77 |     100 |     100 | 13-26,57-63                                      \n  html-website.js         |   77.55 |    49.54 |   67.64 |   78.49 | 53,55,74,340-543,683,962-973,1009-1013,1031-1042 \n  json.js                 |   86.66 |    57.14 |     100 |   86.66 | 31,63                                            \n  kif.js                  |    1.29 |        0 |       0 |    1.31 | 21-167                                           \n  obsidian.js             |   85.71 |    36.58 |      75 |   85.71 | 115-126                                          \n  visualization.js        |    2.33 |        0 |       0 |    2.36 | 44-795                                           \n src/lib/exporters/utils  |    2.63 |        0 |       0 |    2.77 |                                                  \n  relationship-html.js    |    2.63 |        0 |       0 |    2.77 | 14-78                                            \n--------------------------|---------|----------|---------|---------|--------------------------------------------------\n",
      "error": null,
      "exitCode": 0
    }
  ],
  "summary": {
    "total": 5,
    "passed": 3,
    "failed": 1,
    "skipped": 1
  }
}